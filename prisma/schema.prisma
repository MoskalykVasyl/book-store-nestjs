// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  refreshToken String? @map("refresh_token")

  displayName String
  picture     String?
  role        UserRole @default(REGULAR)

  wishList WishList?

  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  REGULAR
  ADMIN
}

model Book {
  id String @id @default(uuid())

  title       String
  price       Int
  countPage   Int      @map("count_page")
  genre       Genre
  publicYear  DateTime @map("year_publication")
  description String
  imageUrl    String?  @map("image_url")
  
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("books")
}

enum Genre {
  Fantasy
  Mystery
  Horror
  RomanceNovel
  Biography
  Detective
}

model Author {
  id String @id @default(uuid())

  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  biography String?
  imageUrl  String?

  books Book[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("authors")
}

model WishList {
  id String @id @default(uuid())

  bookIdList String[] @map("book_list")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("wish_list")
}
